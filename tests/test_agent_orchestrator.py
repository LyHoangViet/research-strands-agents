"""Test Agent Orchestrator with Agents as Tools pattern"""

import sys
import os
import boto3
import logging
from strands_tools import retrieve, http_request
from strands import Agent, tool
from strands.models import BedrockModel

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import config

try:
    print("‚úÖ Strands tools imported")
except ImportError:
    print("‚ö†Ô∏è Some strands tools not available, using mock")
    @tool
    def retrieve(query: str) -> str:
        return f"Retrieved information about: {query}"
    
    @tool
    def http_request(url: str) -> str:
        return f"HTTP request to: {url}"

logging.basicConfig(level=logging.INFO)

boto_session = boto3.Session(
    aws_access_key_id=config.AWS_ACCESS_KEY_ID,
    aws_secret_access_key=config.AWS_SECRET_ACCESS_KEY,
    aws_session_token=config.AWS_SESSION_TOKEN,
    region_name=config.AWS_REGION
)

bedrock_model = BedrockModel(
    boto_session=boto_session,
    model_id=config.CHATBOT_AGENT_MODEL,
    temperature=config.BEDROCK_TEMPERATURE,
    max_tokens=config.BEDROCK_MAX_TOKENS,
)

RESEARCH_ASSISTANT_PROMPT = """B·∫°n l√† tr·ª£ l√Ω nghi√™n c·ª©u chuy√™n nghi·ªáp. T·∫≠p trung v√†o vi·ªác cung c·∫•p
th√¥ng tin ch√≠nh x√°c, c√≥ ngu·ªìn g·ªëc r√µ r√†ng ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi nghi√™n c·ª©u.
Lu√¥n tr√≠ch d·∫´n ngu·ªìn khi c√≥ th·ªÉ v√† nghi√™n c·ª©u k·ªπ l∆∞·ª°ng. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."""

PRODUCT_RECOMMENDATION_PROMPT = """B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n s·∫£n ph·∫©m chuy√™n nghi·ªáp.
ƒê∆∞a ra g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p d·ª±a tr√™n s·ªü th√≠ch, ng√¢n s√°ch v√† nhu c·∫ßu c·ªßa ng∆∞·ªùi d√πng.
Xem x√©t c√°c y·∫øu t·ªë nh∆∞ ch·∫•t l∆∞·ª£ng, gi√° c·∫£, ƒë√°nh gi√° v√† y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."""

TRIP_PLANNING_PROMPT = """B·∫°n l√† tr·ª£ l√Ω l·∫≠p k·∫ø ho·∫°ch du l·ªãch chuy√™n nghi·ªáp.
T·∫°o l·ªãch tr√¨nh du l·ªãch chi ti·∫øt d·ª±a tr√™n s·ªü th√≠ch, ng√¢n s√°ch v√† ƒëi·ªÉm ƒë·∫øn c·ªßa ng∆∞·ªùi d√πng.
Bao g·ªìm g·ª£i √Ω v·ªÅ ch·ªó ·ªü, ho·∫°t ƒë·ªông, nh√† h√†ng v√† ph∆∞∆°ng ti·ªán di chuy·ªÉn. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."""

@tool
def research_assistant(query: str) -> str:
    """X·ª≠ l√Ω v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn nghi√™n c·ª©u.
    
    Args:
        query: C√¢u h·ªèi nghi√™n c·ª©u c·∫ßn th√¥ng tin ch√≠nh x√°c
        
    Returns:
        C√¢u tr·∫£ l·ªùi nghi√™n c·ª©u chi ti·∫øt c√≥ tr√≠ch d·∫´n
    """
    try:
        research_agent = Agent(
            model=bedrock_model,
            system_prompt=RESEARCH_ASSISTANT_PROMPT,
            tools=[retrieve, http_request]  
        )
        
        response = research_agent(query)
        return str(response)
        
    except Exception as e:
        return f"L·ªói trong tr·ª£ l√Ω nghi√™n c·ª©u: {str(e)}"


@tool
def product_recommendation_assistant(query: str) -> str:
    """X·ª≠ l√Ω c√°c c√¢u h·ªèi t∆∞ v·∫•n s·∫£n ph·∫©m b·∫±ng c√°ch g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p.
    
    Args:
        query: C√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m v·ªõi s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng
        
    Returns:
        G·ª£i √Ω s·∫£n ph·∫©m c√° nh√¢n h√≥a v·ªõi l√Ω do
    """
    try:
        product_agent = Agent(
            model=bedrock_model,
            system_prompt=PRODUCT_RECOMMENDATION_PROMPT,
            tools=[retrieve, http_request]  
        )
        
        response = product_agent(query)
        return str(response)
        
    except Exception as e:
        return f"L·ªói trong t∆∞ v·∫•n s·∫£n ph·∫©m: {str(e)}"


@tool
def trip_planning_assistant(query: str) -> str:
    """T·∫°o l·ªãch tr√¨nh du l·ªãch v√† cung c·∫•p l·ªùi khuy√™n du l·ªãch.
    
    Args:
        query: Y√™u c·∫ßu l·∫≠p k·∫ø ho·∫°ch du l·ªãch v·ªõi ƒëi·ªÉm ƒë·∫øn v√† s·ªü th√≠ch
        
    Returns:
        L·ªãch tr√¨nh du l·ªãch chi ti·∫øt ho·∫∑c l·ªùi khuy√™n du l·ªãch
    """
    try:
        travel_agent = Agent(
            model=bedrock_model,
            system_prompt=TRIP_PLANNING_PROMPT,
            tools=[retrieve, http_request]  
        )
        
        response = travel_agent(query)
        return str(response)
        
    except Exception as e:
        return f"L·ªói trong l·∫≠p k·∫ø ho·∫°ch du l·ªãch: {str(e)}"


MAIN_SYSTEM_PROMPT = """B·∫°n l√† tr·ª£ l√Ω th√¥ng minh ƒëi·ªÅu ph·ªëi c√°c truy v·∫•n ƒë·∫øn c√°c agent chuy√™n bi·ªát:

- ƒê·ªëi v·ªõi c√¢u h·ªèi nghi√™n c·ª©u v√† th√¥ng tin th·ª±c t·∫ø ‚Üí S·ª≠ d·ª•ng c√¥ng c·ª• research_assistant
- ƒê·ªëi v·ªõi t∆∞ v·∫•n s·∫£n ph·∫©m v√† mua s·∫Øm ‚Üí S·ª≠ d·ª•ng c√¥ng c·ª• product_recommendation_assistant  
- ƒê·ªëi v·ªõi l·∫≠p k·∫ø ho·∫°ch du l·ªãch v√† l·ªãch tr√¨nh ‚Üí S·ª≠ d·ª•ng c√¥ng c·ª• trip_planning_assistant
- ƒê·ªëi v·ªõi c√¢u h·ªèi ƒë∆°n gi·∫£n kh√¥ng c·∫ßn ki·∫øn th·ª©c chuy√™n m√¥n ‚Üí Tr·∫£ l·ªùi tr·ª±c ti·∫øp

Lu√¥n ch·ªçn c√¥ng c·ª• ph√π h·ª£p nh·∫•t d·ª±a tr√™n truy v·∫•n c·ªßa ng∆∞·ªùi d√πng. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y y√™u c·∫ßu l√†m r√µ.
Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."""

orchestrator = Agent(
    model=bedrock_model,
    system_prompt=MAIN_SYSTEM_PROMPT,
    tools=[research_assistant, product_recommendation_assistant, trip_planning_assistant],
    callback_handler=None
)

def test_orchestrator():
    """Test the main orchestrator agent"""
    print("\n=== Test Orchestrator Agent ===")
    
    test_queries = [
        "AWS Cloud l√† g√¨?",  # N√™n s·ª≠ d·ª•ng research_assistant
        "T∆∞ v·∫•n c√°c d·ªãch v·ª•",  # N√™n s·ª≠ d·ª•ng product_recommendation
        "L·∫≠p k·∫ø ho·∫°ch s·ª≠ d·ª•ng EC2",  # N√™n s·ª≠ d·ª•ng trip_planning
        "2+2 b·∫±ng bao nhi√™u?",  # N√™n tr·∫£ l·ªùi tr·ª±c ti·∫øp
    ]
    
    for i, query in enumerate(test_queries, 1):
        try:
            print(f"\n{'='*60}")
            print(f"Query {i}/{len(test_queries)}: {query}")
            print('='*60)
            
            response = orchestrator(query)
            print(f"\nüìù Response: {str(response)[:300]}...")
            
        except Exception as e:
            print(f"‚ùå Error with query '{query}': {e}")
    
    # In t√≥m t·∫Øt tool usage
    print("\n" + "="*60)
    print("‚úÖ Orchestrator test completed!")

def main():
    """Main function to run all tests"""
    print("=" * 60)
    
    print(f"Model: {config.CHATBOT_AGENT_MODEL}")
    print(f"Region: {config.AWS_REGION}")
    print(f"Temperature: {config.BEDROCK_TEMPERATURE}")

    test_orchestrator()
    
    print("\n" + "=" * 60)
    print("All tests completed!")

if __name__ == "__main__":
    main()