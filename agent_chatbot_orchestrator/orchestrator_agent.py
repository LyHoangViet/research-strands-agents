"""Test Agent Orchestrator with Agents as Tools pattern"""

import sys
import os
import boto3
import logging
from strands import Agent
from strands.models import BedrockModel

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import config
from agent_chatbot_orchestrator.agents.agent_account import get_account_agent
from agent_chatbot_orchestrator.agents.agent_architect import get_architect_agent
from agent_chatbot_orchestrator.agents.agent_qa import get_docs_agent


boto_session = boto3.Session(
    aws_access_key_id=config.AWS_ACCESS_KEY_ID,
    aws_secret_access_key=config.AWS_SECRET_ACCESS_KEY,
    aws_session_token=config.AWS_SESSION_TOKEN,
    region_name=config.AWS_REGION
)

bedrock_model = BedrockModel(
    boto_session=boto_session,
    model_id=config.CHATBOT_AGENT_MODEL,
    temperature=config.BEDROCK_TEMPERATURE,
    max_tokens=config.BEDROCK_MAX_TOKENS,
)

MAIN_SYSTEM_PROMPT = """
B·∫°n l√† tr·ª£ l√Ω th√¥ng minh, c√≥ nhi·ªám v·ª• ƒëi·ªÅu ph·ªëi truy v·∫•n c·ªßa ng∆∞·ªùi d√πng ƒë·∫øn c√°c agent chuy√™n bi·ªát.
Lu√¥n l·ª±a ch·ªçn agent ph√π h·ª£p nh·∫•t d·ª±a tr√™n n·ªôi dung c√¢u h·ªèi, v√† khi ƒë√£ ch·ªçn ƒë∆∞·ª£c agent, h√£y g·ªçi tool t∆∞∆°ng ·ª©ng 
v·ªõi to√†n b·ªô c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng (user_input) l√†m input cho tool ƒë√≥. 
Sau ƒë√≥, s·ª≠ d·ª•ng output t·ª´ tool ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng.

C√°c l·ª±a ch·ªçn:
- N·∫øu ng∆∞·ªùi d√πng mu·ªën **xem ho·∫∑c l·∫•y th√¥ng tin v·ªÅ c√°c resource ƒëang s·ª≠ d·ª•ng trong AWS account** ‚Üí g·ªçi tool **get_account_agent(user_input)**
- N·∫øu ng∆∞·ªùi d√πng mu·ªën **thi·∫øt k·∫ø, v·∫Ω ho·∫∑c t∆∞ v·∫•n v·ªÅ ki·∫øn tr√∫c h·ªá th·ªëng tr√™n AWS** ‚Üí g·ªçi tool **get_architect_agent(user_input)**
- N·∫øu ng∆∞·ªùi d√πng mu·ªën **t√¨m ki·∫øm, tham kh·∫£o ho·∫∑c ƒë·ªçc h∆∞·ªõng d·∫´n ch√≠nh th·ª©c t·ª´ t√†i li·ªáu AWS** ‚Üí g·ªçi tool **get_docs_agent(user_input)**
- N·∫øu c√¢u h·ªèi ƒë∆°n gi·∫£n, kh√¥ng thu·ªôc ph·∫°m vi c√°c agent tr√™n ‚Üí tr·∫£ l·ªùi tr·ª±c ti·∫øp.

Lu√¥n ∆∞u ti√™n ch·ªçn tool ph√π h·ª£p nh·∫•t. 
N·∫øu ch∆∞a r√µ ng∆∞·ªùi d√πng c·∫ßn g√¨, h√£y h·ªèi l·∫°i ƒë·ªÉ l√†m r√µ.
Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
"""

orchestrator = Agent(
    model=bedrock_model,
    system_prompt=MAIN_SYSTEM_PROMPT,
    tools=[get_account_agent, get_architect_agent, get_docs_agent],
    callback_handler=None
)

def main():
    """Test Agent Account get resource on Cloud AWS"""
    print("Nh·∫≠p c√¢u h·ªèi v·ªÅ AWS (ho·∫∑c 'quit' ƒë·ªÉ tho√°t):")
    
    while True:
        try:
            user_input = input("\n‚ùì C√¢u h·ªèi: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'q', 'tho√°t']:
                print("üëã T·∫°m bi·ªát!")
                break
                
            if not user_input:
                continue
            
            response = orchestrator(user_input)
            print(f"\nüí° Tr·∫£ l·ªùi:\n{response}")
            
        except KeyboardInterrupt:
            print("\n\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"\n‚ùå L·ªói: {str(e)}")

if __name__ == "__main__":
    main()
